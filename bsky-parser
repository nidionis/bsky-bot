#!/usr/bin/env python3
import os
import sys
import argparse
import requests

API_BASE = "https://bsky.social/xrpc"
TOKEN_DIR = "/tmp/skY"

def token_path(username):
    return os.path.join(TOKEN_DIR, username)

def load_token(username):
    path = token_path(username)
    if not os.path.exists(path):
        sys.exit(f"Token not found for user '{username}'. Run bsky-connect first.")
    with open(path, "r") as f:
        return f.read().strip()

def load_keywords(file_path):
    with open(file_path, "r") as f:
        return [line.strip().lower() for line in f if line.strip()]

def search_posts(jwt, query, limit=25):
    headers = {"Authorization": f"Bearer {jwt}"}
    resp = requests.get(f"{API_BASE}/app.bsky.feed.searchPosts",
                        headers=headers, params={"q": query, "limit": limit})
    resp.raise_for_status()
    return resp.json().get("posts", [])

def text_matches_keywords(text, keywords, hashtags_only=False):
    text = text.lower()
    if hashtags_only:
        text = " ".join(word for word in text.split() if word.startswith("#"))
    return any(k in text for k in keywords)

def parse_args():
    parser = argparse.ArgumentParser(description="Parse Bluesky posts for keywords")
    parser.add_argument("-u", "--user", required=True, help="Bluesky username to use")
    parser.add_argument("-k", "--keywords", required=True, help="File with keywords, one per line")
    parser.add_argument("-H", "--hashtags", action="store_true", help="Match hashtags only")
    parser.add_argument("-L", "--limit", type=int, default=25, help="Number of posts to fetch")
    return parser.parse_args()

def main():
    args = parse_args()
    jwt = load_token(args.user)
    keywords = load_keywords(args.keywords)
    query_str = " OR ".join(keywords)

    posts = search_posts(jwt, query_str, args.limit)

    for post in posts:
        text = post["record"].get("text", "")
        if text_matches_keywords(text, keywords, args.hashtags):
            handle = post["author"]["handle"]
            print(f"{handle}: {text}")

if __name__ == "__main__":
    main()

